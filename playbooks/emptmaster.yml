- hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: "Destroy Azure Deploy  Resource group {{ resource_group_name }}"
      azure_rm_deployment:
        state: absent
        subscription_id: "{{ subscriptionID }}"
        resource_group_name: "{{ resource_group_name }}"
################################################
####  Create basic infra components
################################################
    - name: "Create Azure Deploy {{ resource_group_name }}"
      azure_rm_deployment:
        state: present
        subscription_id: "{{ subscriptionID }}"
        resource_group_name: "{{ resource_group_name }}"
        template_link: 'https://raw.githubusercontent.com/j1cken/ansible-azure/master/infra.json'
        location: northeurope
      register: azure_vm
      
      
################################################
####  Create basic humphost node, this exposes 8443 and 22 as a public ports on a public ip , in future this will be a jump host and also entry point for the masters 
###   we use this node to jump into the other nodes
################################################
    - name: Create Jumphost Deployment
      with_dict: "{{ jumphost }}"
      azure_rm_deployment:
        deployment_mode: incremental
        state: present
        subscription_id: "{{ subscriptionID }}"
        resource_group_name: "{{ resource_group_name }}"
        location: northeurope
        #### We add it to the master subnet but really don't matter 
        parameters:
          image:
            value: rhel
          subnetName:
            value: masterSubnet
          virtualNetworkName:
            value: openshiftVnet
          dnsName:
            value: "master-{{ resource_group_name }}"
          adminUsername:
            value: "{{ adminUsername }}"
          vmSize:
            value: "Standard_D1"
          adminPassword:
            value: "{{ adminPassword }}"
          vmName:
            value:  "{{ item.value.name }}"
          tags:
            value: "{{ item.value.tags }}"
          sshKeyData:
            value: "{{ sshkey }}"
        template_link: 'https://raw.githubusercontent.com/j1cken/ansible-azure/master/master.json'
      register: azure
    - debug: msg="the value of azure  {{ azure }}"

    - name: Add new instance to host group
      add_host: hostname={{ item['ips'][0].public_ip }} groupname=azure_vms
      with_items: azure.results[0].deployment.instances
    - set_fact:
        publicjumpdns: "{{ azure.results[0].deployment.instances[0].ips[0].dns_settings.fqdn }}"
        publicjumpip: "{{ azure.results[0].deployment.instances[0].ips[0].public_ip }}"
        lbvmname: "{{ azure.results[0].deployment.instances[0].vm_name }}"

    - debug: msg="the value of azure  {{ azure }}"
    - debug: msg="the value of dns  {{ publicjumpdns }}"
    - debug: msg="the value of ip  {{ publicjumpip }}"
      ################################################
      ####  Only setting these values so we can manually look up. bit of a hack
      ################################################
    - lineinfile:
        dest: group_vars/all
        regexp: "^publicjumpdns:"
        line: "publicjumpdns: {{ publicjumpdns }}"
    - lineinfile:
        dest: group_vars/all
        regexp: "^publicjumpip:"
        line: "publicjumpip: {{ publicjumpip }}"
    

################################################
####  Adding the jump host to our local know hosts
################################################
- hosts: localhost
  connection: local
  tasks:
    - name: Scan the public key for master and added it to known hosts
      shell: "ssh-keyscan -H -T 10  {{ item }} >> ~/.ssh/known_hosts "
      with_items: groups['azure_vms']



################################################
#### Generating key on jump host. This then download locally to /tmp//id_rsa.tmp and shared to other newly create azure hosts on initialization
#### Rather complicated way but it avoids opening port 22 on all hosts
################################################
- hosts: azure_vms
  vars:
    publicjumpdns: "{{ hostvars['localhost']['publicjumpdns']}}"
    publicjumpip: "{{ hostvars['localhost']['publicjumpip']}}"
    lbvmname: "{{ hostvars['localhost']['lbvmname']}}"

  user: "{{ adminUsername }}"
  tasks:
    - name: Wait for SSH to come up
      wait_for: port=22 timeout=2000 state=started
    - name: echo the hostname of the vm
      shell: hostname
    - name: Generating RSA key for root
      user: name={{ adminUsername }} generate_ssh_key=yes
    - name: Downloading pub key
      fetch: src=/home/{{ adminUsername }}/.ssh/id_rsa.pub dest=/tmp/id_rsa.tmp flat=yes
    - authorized_key: user="{{ adminUsername }}" key="{{ lookup('file', '/tmp/id_rsa.tmp') }}"


################################################
#### Subscribe the jump hosts. need to install bits like ansible and "atomic-openshift-utils"
################################################
- hosts: azure_vms
  user: "{{ adminUsername }}"
  sudo: true
  roles:
     - { role: subscribe, rhnuser: "{{ rh_subscription_user }}", rhnpassword: "{{ rh_subscription_pass }}" }
  tasks:
    - name: Install Basic Preqes
      yum:
        name: "{{ item }}"
        state: present
      with_items:
           - git
           - vim
           - ansible
           - atomic-openshift-utils


################################################
#### because
################################################
- hosts: azure_vms
  user: "{{ adminUsername }}"
  vars:
    contents: "{{ lookup('file', '/tmp/id_rsa.tmp') }}"
  tasks:
    - debug: msg="the value of foo.txt is {{ contents }}"
### infra here


################################################
####  Create basic Master node, this exposes 8443 and 22 as a public ports on a public ip , in future this will be a jump host
###   we use this node to jump into the other nodes
################################################
################################################
#### Creating the masters nodes. these sit behind the jump host. no need to open public ports
####Todo, dyncamically add the list of infra nodes to group
################################################
- hosts: localhost
  serial: 3
  connection: local
  vars:
      masterkey: "{{ lookup('file', '/tmp/id_rsa.tmp') }}"
  gather_facts: no
  tasks:
    - name: Create Masters Deploy
      with_dict: "{{ masters }}"
      azure_rm_deployment:
        deployment_mode: incremental
        state: present
        subscription_id: "{{ subscriptionID }}"
        resource_group_name: "{{ resource_group_name }}"
        location: northeurope
        parameters:
          subnetName:
            value: masterSubnet
          virtualNetworkName:
            value: openshiftVnet
          adminUsername:
            value: "{{ adminUsername }}"
          vmSize:
            value: "{{ node_vmSize }}"
          adminPassword:
            value: "{{ adminPassword }}"
          image:
            value: rhel
          masterKey:
            value: "{{ masterkey }}"
          tags:
            value: "{{ item.value.tags }}"
          vmName:
            value: "{{ item.value.name }}"
          sshKeyData:
            value: "{{ sshkey }}"
        template_link: 'https://raw.githubusercontent.com/j1cken/ansible-azure/master/nodes.json'
        #i#template_link: 'ansible-azure/nodes.json'
      register: azuremasternodes

################################################
#### Creating the infrastrucute nodes.
####Todo, dyncamically add the list of infra nodes to group
################################################
- hosts: localhost
#  serial: 2
  connection: local
  vars:
      masterkey: "{{ lookup('file', '/tmp/id_rsa.tmp') }}"
  gather_facts: no
  tasks:
    - name: Create infra Nodes Deploy
      with_dict: "{{ infranodes }}"
      azure_rm_deployment:
        deployment_mode: incremental
        state: present
        subscription_id: "{{ subscriptionID }}"
        resource_group_name: "{{ resource_group_name }}"
        location: northeurope
        parameters:
          subnetName:
            value: infranodeSubnet
          virtualNetworkName:
            value: openshiftVnet
          adminUsername:
            value: "{{ adminUsername }}"
          vmSize:
            value: "{{ node_vmSize }}"
          adminPassword:
            value: "{{ adminPassword }}"
          image:
            value: rhel
          masterKey:
            value: "{{ masterkey }}"
          tags:
            value: "{{ item.value.tags }}"
          vmName:
            value: "{{ item.value.name }}"
          sshKeyData:
            value: "{{ sshkey }}"
        template_link: 'https://raw.githubusercontent.com/j1cken/ansible-azure/master/infranode.json'
        #i#template_link: 'ansible-azure/nodes.json'
      register: azureinfranodes
    - set_fact:
        routerpublicip: "{{ azureinfranodes.results[0].deployment.instances[0].ips[0].public_ip }}"
    - debug: msg="the value of azure  {{ azure }}"
    - debug: msg="the value of ip  {{ routerpublicip }}"

################################################
#### Creating the application nodes.
####Todo, dyncamically add the list of infra nodes to group
################################################
- hosts: localhost
#  serial: 1
  connection: local
  vars:
      masterkey: "{{ lookup('file', '/tmp/id_rsa.tmp') }}"
  gather_facts: no
  tasks:
    - name: Create Nodes Deploy
      with_dict: "{{ nodes }}"
      azure_rm_deployment:
        deployment_mode: incremental
        state: present
        subscription_id: "{{ subscriptionID }}"
        resource_group_name: "{{ resource_group_name }}"
        location: northeurope
        parameters:
          subnetName:
            value: nodeSubnet
          virtualNetworkName:
            value: openshiftVnet
          adminUsername:
            value: "{{ adminUsername }}"
          vmSize:
            value: "{{ node_vmSize }}"
          adminPassword:
            value: "{{ adminPassword }}"
          image:
            value: rhel
          masterKey:
            value: "{{ masterkey }}"
          tags:
            value: "{{ item.value.tags }}"
          vmName:
            value: "{{ item.value.name }}"
          sshKeyData:
            value: "{{ sshkey }}"
        template_link: 'https://raw.githubusercontent.com/j1cken/ansible-azure/master/nodes.json'
        #i#template_link: 'ansible-azure/nodes.json'
      register: azurenodes


################################################
#### This is kinda messy, While you can technially jump onto the jump machine and  call ansible playbook
####    ---  /bin/ansible-playbook /usr/share/ansible/openshift-ansible/playbooks/byo/config.yml
####  In this case i'm using to jump host as a 'gatewayed' ansible proxy. basically proxying my ansible commands via the jump host.
#### To do this seamlessly the local machine requires the hosts to be added to know hosts
#### This the funky stuff that going on below... ohh forgive me
####
################################################
- hosts: azure_vms
  user: "{{ adminUsername }}"
  tasks:
## From the jumphost scan the keys for all app nodes  and print to file
    - name: From the jumphost scan the keys for all app nodes  and print to file
      shell: "ssh-keyscan -H -T 10  {{ item.value.name }} >> /home/{{ adminUsername }}/.ssh/known_hosts "
      with_dict: "{{ nodes }}"
## From the jumphost fetch the keys for all app nodes  and save locally
    - name: From the jumphost fetch the keys for all app nodes  and save locally
      fetch: src=/home/{{ adminUsername }}/.ssh/known_hosts  dest=/tmp/{{ item.value.name }}_knownhosts flat=yes
      with_dict: "{{ nodes }}"

## From the jumphost scan the keys for all infranodes  and print to file
    - name:  From the jumphost scan the keys for all infranodes  and print to file
      shell: "ssh-keyscan -H -T 10  {{ item.value.name }} >> /home/{{ adminUsername }}/.ssh/known_hosts "
      with_dict: "{{ infranodes }}"
## From the jumphost fetch the keys for all infra nodes  and save locally
    - name: From the jumphost fetch the keys for all infra nodes  and save locally
      fetch: src=/home/{{ adminUsername }}/.ssh/known_hosts  dest=/tmp/{{ item.value.name }}_knownhosts flat=yes
      with_dict: "{{ infranodes }}"

## From the jumphost scan the keys for all masters  and print to file
    - name: From the jumphost scan the keys for all masters  and print to file
      shell: "ssh-keyscan -H -T 10  {{ item.value.name }} >> /home/{{ adminUsername }}/.ssh/known_hosts "
      with_dict: "{{ masters }}"
## From the jumphost fetch the keys for all master nodes  and save locally
    - name:  From the jumphost fetch the keys for all master nodes  and save locally
      fetch: src=/home/{{ adminUsername }}/.ssh/known_hosts  dest=/tmp/{{ item.value.name }}_knownhosts flat=yes
      with_dict: "{{ masters }}"

## From the jumphost scan the keys for all jumphost  and print to file
    - name: From the jumphost scan the keys for all jumphost  and print to file
      shell: "ssh-keyscan -H -T 10  {{ item.value.name }} >> /home/{{ adminUsername }}/.ssh/known_hosts "
      with_dict: "{{ jumphost }}"
## From the jumphost fetch the keys for all jumphost nodes  and save locally
    - name:  From the jumphost fetch the keys for all jumphost nodes  and save locally
      fetch: src=/home/{{ adminUsername }}/.ssh/known_hosts  dest=/tmp/{{ item.value.name }}_knownhosts flat=yes
      with_dict: "{{ jumphost }}"

#################################################
 #### This is kinda messy, I'm appending all known hosts to local file. We fetched these in the previous step
################################################
- hosts: localhost
  connection: local
  tasks:
    - name: Assemble nodes knownhosts locally
      shell : "cat /tmp/{{ item.value.name }}_knownhosts >> ~/.ssh/known_hosts "
      with_dict: "{{ nodes }}"
    - name:  Assemble masters knownhosts locally
      shell : "cat /tmp/{{ item.value.name }}_knownhosts >> ~/.ssh/known_hosts "
      with_dict: "{{ masters }}"
    - name:  Assemble infranodes knownhosts locally
      shell : "cat /tmp/{{ item.value.name }}_knownhosts >> ~/.ssh/known_hosts "
      with_dict: "{{ infranodes }}"
    - name:  Assemble jumphost knownhosts locally
      shell : "cat /tmp/{{ item.value.name }}_knownhosts >> ~/.ssh/known_hosts "
      with_dict: "{{ jumphost }}"


## copy the ansible templated file (this is step 2 )
#################################################
 #### This may not be needed but its preparing the njumphost/master
################################################
- hosts: azure_vms
  gather_facts: False
  vars:
    publicjumpdns: "{{ hostvars['localhost']['publicjumpdns']}}"
    publicjumpip: "{{ hostvars['localhost']['publicjumpip']}}"
    routerpublicip: "{{ hostvars['localhost']['routerpublicip']}}"
    lbvmname: "{{ hostvars['localhost']['lbvmname']}}"

  user: "{{ adminUsername }}"
  sudo: true
  roles:
     - { role: prepare_multi }
  tasks:
     - lineinfile:
         dest: /etc/ansible/ansible.cfg
         regexp: "^#log_path"
         line: "log_path = /tmp/ansible.log"

#################################################
 #### Prepare dynamic group
#################################################
- hosts: localhost
  gather_facts: False
  connection: local
  tasks:
    - name: Add new infranodes instance to gatewayed-nodes group
      add_host: hostname={{ item.value.name }} groupname=gatewayed-nodes
      with_dict:  "{{ infranodes }}"
    - name: Add new nodes instance to gatewayed-nodes group
      add_host: hostname={{ item.value.name }} groupname=gatewayed-nodes
      with_dict:  "{{ nodes }}"
    - name: Add new instance to gatewayed-masters group
      add_host: hostname={{ item.value.name }} groupname=gatewayed-masters
      with_dict:  "{{ masters }}"

